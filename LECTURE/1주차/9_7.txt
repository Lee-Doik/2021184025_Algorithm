알고리즘의 표현방법 4가지

1. 자연어
2. 의사코드
3. 플로우차트
4. 특정 언어 코드

알고리즘의 효율성 

1. 수행시간 
2. 사용되는 메모리 크기

시간 복잡도, 공간 복잡도, 구현 복잡도

일반적으로 시간복잡도가 주로 사용됨

어떤 경우에는 구현 복잡도를 먼저 고려함

예를 들어 퀵소트 셀렉션소트
전자는 구현하기 어려움 , 후자는 구현 쉬움
하지만 전자는 시간이 빠름, 후자는 시간이 느림.
근소한 시간차이를 메우기 위해 들이는 노력을 줄여야 함.


시간 복잡도란 기본적인 연산 횟수를 입력 크기의 함수로 나타냄

	기본적인 연산 = 크기비교, 데이터 읽기, 갱신 , 숫자 계산

최악의 경우 분석
	알고리즘의 수행시간이 얼마 이상은 넘지 않는다 라는 상한의 의미
평균의 경우 분석
	입력의 확률 분포를 가정해 분석함. 일반적으로 균등 분포
최선의 경우 분석
	최적 optimal 알고리즘을 고안하는데 사용하기도 함. 잘 안씀.

시간 복잡도는 입력 크기에 대한 함수로 표기함.
	주로 여러개의 항을 가지는 다항식.
	입력의 크기에 대한 함수로 표현하기 위해 점근적 표기를 사용함.

1. Big - O 표기 : 복잡도의 점근적 상한

2. Big - Omega 표기 : 복잡도의 점근적 하한
	
3. Theta 표기 : 복잡도의 상한과 하한이 동시에 적용되는 경우
	최고차항만 계수 제외하고 표기.


