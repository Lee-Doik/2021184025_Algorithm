7_1 문제의 분류
	
	다항식 시간 복잡도를 가진 알고리즘으로 해결되는 P(polinomial)문제 집합.
	->해결가능

	다항식 시간보다 큰 복잡도를 가진 알고리즘으로 해결되는 문제의 집합.

	여러가지 문제 집합으로 다시 분류.

	NP-완전문제집합.

		어느 한의 완전문제에 대하여 다항식 시간의 알고리즘을 찾아내면 모든 다른 완전문제도 다항식 시간 안에 해를 찾을 수 있다.

	NP문제집합

		P문제 집합과 NP문제 집합을 둘 다 포함하는 문제의 집합.

		NP문제 집합에 속한 문제를 NP문제라고 한다.

		NP문제는 비 결정적 다항식 시간 알고리즘을 가진 문제이다.

	NP 알고리즘 

		비결정 다항식 시간 알고리즘

		첫번째 단계

			주어진 입력에 대해서 하나의 해를 추측

		두번째 단계

			그 해를 다항식 시간 내에 확인한 후에

			맞다 / 아니다를 판별.

		해를 찾는게 아니라 다항식 시간에 확인하는 알고리즘.

	문제의 변형

		맞다 / 아니다 로 판별 가능한 문제로 만들어야 함.

		'결정문제'

	NP 완전 문제의 특성을 알기 위해 어떤 문제를 다른 문제로 변환(reduction)하는 과정을 이해해야 함.

	문제의 변환

		문제 A를 해결하기 위해서 문제 B를 해결하는 알고리즘을 이용하는 것을 의미

	문제의 변환 과정

		먼저 문제 A의 입력을 문제 B의 입력형태로 변환시키고

		변환된 입력으로 문제 B를 해결하는 알고리즘을 수행

		마지막으로 수행 결과인 문제 A의 해를 출력.

	문제를 변환하는 전 과정의 시간 복잡도.


	추이(transtive) 관계

	다항식 + 다항식 = 다항식 이므로 모든 문제가 다항식 시간 한에 해결이 된다면

	NP-완전 문제도 모두 해결 가능하다.

	NP완전문제의 정의

		문제 A가 NP-완전문제가 되려면

		문제 A는 NP문제이고, 동시에 NP-하드문제이다.

	SAT(Satisfiability)

	부울 변수들이 OR로 표현된 논리식이 여러개 주어질 때, 이 논리식들을 모두 만족시키는 각 부울 변수의 값을 찾는 문제.

	NP-완전문제의 해결

		1. 다항식 시간 안에 해를 찾는 것

		2. 모든 입력에 대해 해를 찾는 것.

		3. 최적해를 찾는 것.

		이중 한가지는 포기해야함.

	3번을 포기하여 최적해에 가까운 값을 찾는 근사 알고리즘을 구한다.

	근사 알고리즘(Approximation Algoryhtm)

		근사 알고리즘은 근사해를 찾는 대신다항식 시간의 복잡도를 가진다.

		근사 알고리즘은 근사해가 얼마나 최적해에 가까운지를 나타내는 근사 비율을 같이 제시해야 함.

